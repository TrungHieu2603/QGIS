# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MyPluginsDialog
                                 A QGIS plugin
 Plugins truy vấn
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Trung Hiếu
        email                : ttthieu2603@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from PyQt5 import uic
from PyQt5.QtWidgets import QDialog, QFileDialog, QMessageBox
from qgis.core import QgsProject, QgsVectorLayer, QgsProcessingFeedback
import processing
import sqlite3

class MyPluginsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = None
        self.init_ui()

    def init_ui(self):
        """
        Khởi tạo giao diện người dùng từ tệp .ui.
        """
        ui_file = os.path.join(os.path.dirname(__file__), 'my_plugins_dialog_base.ui')
        if not os.path.exists(ui_file):
            raise FileNotFoundError(f"Tệp UI không tìm thấy: {ui_file}")
        
        self.ui = uic.loadUi(ui_file, self)
        self.setup_ui()
        self.setup_signals()

    def setup_ui(self):
        """
        Cấu hình ban đầu cho giao diện, như điền danh sách lớp và đơn vị quản lý.
        """
        # Điền danh sách lớp dữ liệu trong dự án
        layers = QgsProject.instance().mapLayers().values()
        vector_layers = [layer.name() for layer in layers if isinstance(layer, QgsVectorLayer)]
        self.ui.comboBoxLayer1.addItems(vector_layers)
        self.ui.comboBoxLayer2.addItems(vector_layers)

        # Lấy danh sách đơn vị quản lý điện lực từ hệ thống
        try:
            unit_list = self.get_units_from_qgis()
            self.ui.comboBoxUnit.addItems(unit_list)
        except ValueError as e:
            QMessageBox.warning(self, "Cảnh báo", str(e))

    def get_units_from_qgis(self):
        # Tìm lớp dữ liệu chứa thông tin đơn vị quản lý điện lực
        layers = QgsProject.instance().mapLayers().values()
        field_name = "phanCapQL"  # Đặt tên cột chứa thông tin đơn vị quản lý điện lực (sửa tên cột tùy vào dữ liệu thực tế)

        for layer in layers:
            if isinstance(layer, QgsVectorLayer) and layer.name() == "Đơn vị quản lý điện lực Bắc Ninh":  
                # Kiểm tra xem cột field_name có tồn tại không
                if field_name in [field.name() for field in layer.fields()]:
                    units = []
                    for feature in layer.getFeatures():
                        unit_name = feature[field_name]  # Lấy giá trị của trường chứa tên đơn vị
                        if unit_name and unit_name not in units:  # Loại bỏ trùng lặp và bỏ qua giá trị trống
                            units.append(unit_name)
                    return units
                else:
                    raise ValueError(f"Cột '{field_name}' không tồn tại trong lớp '{layer.name()}'.")
        raise ValueError("Không tìm thấy lớp 'Đơn vị quản lý điện lực Bắc Ninh' trong dự án.")



    def setup_signals(self):
        """
        Thiết lập các kết nối signal-slot.
        """
        self.ui.buttonRunQuery.clicked.connect(self.run_query)
        self.ui.buttonSaveLocation.clicked.connect(self.select_save_location)

    def select_save_location(self):
        """
        Chọn đường dẫn lưu kết quả.
        """
        save_path, _ = QFileDialog.getSaveFileName(self, "Chọn đường dẫn lưu", "", "Shapefile (*.shp)")
        if save_path:
            self.ui.buttonSaveLocation.setText(save_path)

    def get_selected_layer(self, layer_name):
        """
        Lấy lớp dữ liệu từ tên lớp trong dự án.
        """
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.name() == layer_name:
                return layer
        QMessageBox.warning(self, "Thông báo", f"Không tìm thấy lớp: {layer_name}")
        return None

    def run_query(self):
        """
        Thực hiện truy vấn giao không gian và tạo lớp mới.
        """
        layer1_name = self.ui.comboBoxLayer1.currentText()
        layer2_name = self.ui.comboBoxLayer2.currentText()
        selected_unit = self.ui.comboBoxUnit.currentText()
        save_path = self.ui.buttonSaveLocation.text()

        # Kiểm tra dữ liệu đầu vào
        if not layer1_name or not layer2_name:
            QMessageBox.critical(self, "Lỗi", "Vui lòng chọn đầy đủ các lớp dữ liệu.")
            return
        if not save_path:
            QMessageBox.critical(self, "Lỗi", "Vui lòng chọn đường dẫn lưu kết quả.")
            return
        if not selected_unit:
            QMessageBox.critical(self, "Lỗi", "Vui lòng chọn đơn vị quản lý điện lực.")
            return

        # Lấy lớp dữ liệu
        layer1 = self.get_selected_layer(layer1_name)
        layer2 = self.get_selected_layer(layer2_name)
        if not layer1 or not layer2:
            return

        try:
            # Thực hiện phép giao không gian
            feedback = QgsProcessingFeedback()
            params = {
                'INPUT': layer1,
                'OVERLAY': layer2,
                'OUTPUT': save_path
            }
            result = processing.run("native:intersection", params, feedback=feedback)

            if result:
                # Thêm lớp kết quả vào QGIS
                output_layer = QgsVectorLayer(save_path, f"Kết quả {selected_unit}", "ogr")
                QgsProject.instance().addMapLayer(output_layer)

                QMessageBox.information(self, "Thành công", f"Lớp dữ liệu mới đã được tạo và hiển thị.\nĐơn vị quản lý: {selected_unit}")
            else:
                QMessageBox.critical(self, "Lỗi", "Không thể thực hiện phép giao.")
        except Exception as e:
            QMessageBox.critical(self, "Lỗi", f"Đã xảy ra lỗi: {str(e)}")
